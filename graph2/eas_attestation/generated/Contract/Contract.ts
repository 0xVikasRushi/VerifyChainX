// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AttestationAdded extends ethereum.Event {
  get params(): AttestationAdded__Params {
    return new AttestationAdded__Params(this);
  }
}

export class AttestationAdded__Params {
  _event: AttestationAdded;

  constructor(event: AttestationAdded) {
    this._event = event;
  }

  get attester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uid(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get schema(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Contract__attestationsByRecipientResult {
  value0: Address;
  value1: Address;
  value2: Bytes;
  value3: Bytes;

  constructor(value0: Address, value1: Address, value2: Bytes, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    return map;
  }

  getAttester(): Address {
    return this.value0;
  }

  getRecipient(): Address {
    return this.value1;
  }

  getUid(): Bytes {
    return this.value2;
  }

  getSchema(): Bytes {
    return this.value3;
  }
}

export class Contract__getAttestationsByRecipientResultValue0Struct extends ethereum.Tuple {
  get attester(): Address {
    return this[0].toAddress();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get uid(): Bytes {
    return this[2].toBytes();
  }

  get schema(): Bytes {
    return this[3].toBytes();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  attestationsByRecipient(
    param0: Address,
    param1: BigInt
  ): Contract__attestationsByRecipientResult {
    let result = super.call(
      "attestationsByRecipient",
      "attestationsByRecipient(address,uint256):(address,address,bytes32,bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new Contract__attestationsByRecipientResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBytes(),
      result[3].toBytes()
    );
  }

  try_attestationsByRecipient(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Contract__attestationsByRecipientResult> {
    let result = super.tryCall(
      "attestationsByRecipient",
      "attestationsByRecipient(address,uint256):(address,address,bytes32,bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__attestationsByRecipientResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBytes(),
        value[3].toBytes()
      )
    );
  }

  getAttestationsByRecipient(
    _recipient: Address
  ): Array<Contract__getAttestationsByRecipientResultValue0Struct> {
    let result = super.call(
      "getAttestationsByRecipient",
      "getAttestationsByRecipient(address):((address,address,bytes32,bytes32)[])",
      [ethereum.Value.fromAddress(_recipient)]
    );

    return result[0].toTupleArray<
      Contract__getAttestationsByRecipientResultValue0Struct
    >();
  }

  try_getAttestationsByRecipient(
    _recipient: Address
  ): ethereum.CallResult<
    Array<Contract__getAttestationsByRecipientResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAttestationsByRecipient",
      "getAttestationsByRecipient(address):((address,address,bytes32,bytes32)[])",
      [ethereum.Value.fromAddress(_recipient)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Contract__getAttestationsByRecipientResultValue0Struct
      >()
    );
  }
}

export class AddAttestationCall extends ethereum.Call {
  get inputs(): AddAttestationCall__Inputs {
    return new AddAttestationCall__Inputs(this);
  }

  get outputs(): AddAttestationCall__Outputs {
    return new AddAttestationCall__Outputs(this);
  }
}

export class AddAttestationCall__Inputs {
  _call: AddAttestationCall;

  constructor(call: AddAttestationCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _uid(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _schema(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AddAttestationCall__Outputs {
  _call: AddAttestationCall;

  constructor(call: AddAttestationCall) {
    this._call = call;
  }
}
